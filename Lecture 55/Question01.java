/* 

The dictionary meaning of an annotation is the extra note or comment added to a text or a diagram. Java extends the same concept of providing extra information to source code.

In Java annotations are used to provide extra information about elements/sections of the source code.

It is important to note that annotations by themselves do not change the logic/operation of the code.

The annotations are processed usually by the external tools. They could be compile-time or run-time tools or simple Java documentation generation tools.

Below are some of the most commonly used annotations bundled with Java:
@Deprecated - this annotation can be used for any section of code like method, fields including top-level classes and interfaces. When compiler sees that a we are using some code which is marked as deprecated, it immediately raises a warning to intimate the programmers to refrain from using such code.
@Override - this annotation when used for methods informs the compiler that this method is trying to override a method provided in the super class.
@SuppressWarnings - this annotation informs the compiler to suppress warning information. For example, @SuppressWarnings("deprecation") informs the compiler to suppress the warnings generated by because of using a deprecated code.
Java also allows for writing custom annotations which are processed either by user's custom annotation processors or by annotation processors developed by third software developers.

Below is the syntax for using annotations in code:
@Override	//simple annotation for a method without values
public String toString() {
   ...
}

@MyCustomAnnotation1	//simple annotation for a field without values
private int someField;

@MyCustomAnnotation2(name1 = "value1", name2 = "value2")	//annotation for a method with values
public String someMethod() {
   ...
}
As you can use from the above code, annotations always start with the @ (at-symbol). There can be annotations with or without values. Annotations can be created for any fragment of code.

See and retype the below code which demonstrates the usage of @override annotation.

Note: Please don't change the package name.

*/

package q11358;
public class Student {
	private String id;
	private String name;
	public Student(String id, String name) {
		this.id = id;
		this.name = name;
	}
	@Override
	public String toString() {
		return "Student[ id = " + id + ", name=" + name + " ]";
	}
	public static void main(String[] args) {
		Student st1 = new Student("1007", "Ganga");
		System.out.println("st1 : " + st1);
	}
}